name: Rust

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    # - uses: Swatinem/rust-cache@v2
    #   with:
    #     prefix-key: ""
    #     key: cache-${{ hashFiles('**/Cargo.lock') }}
    # - name: Test
    #   run: cargo test
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    # So now you can use Actions' own caching!
    # - name: Cache Docker layers
    #   uses: actions/cache@v3
    #   with:
    #     path: buildx-cache-${{ hashFiles('**/Cargo.lock') }}
    #     key: buildx-cache-${{ hashFiles('**/Cargo.lock') }}
    #     restore-keys: |
    #       buildx-cache-${{ hashFiles('**/Cargo.lock') }}
    #       buildx-cache
    # And make it available for builds
    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: .
        push: false
        cache-from: type=gha,src=buildx-cache-2-${{ hashFiles('**/Cargo.lock') }}
        cache-to: type=gha,dest=buildx-cache-2-${{ hashFiles('**/Cargo.lock') }}
  deploy:
    strategy:
      matrix:
        include:
        - service: "test1"
          path: "src/test1"
        - service: "test2"
          path: "src/test2"
        - service: "test3"
          path: "src/test3"
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Deploy Prepare
      run: |
        echo ${{ matrix.path }}
        echo ${{ matrix.service }} > test.txt
    - name: Wait
      run: sleep 10
    - name: Print
      run: cat test.txt
    - name: Deploy
      run: helm --help

